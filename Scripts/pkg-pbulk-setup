#!/bin/sh -e

##########################################################################
#   Script description:
#       Generate a basic pbulk setup for a given pkgsrc prefix.
#       
#   Arguments:
#       None.
#
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2017-04-29  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

if [ `whoami` != root ]; then
    printf "$0 must be run by root.\n"
    exit 1
fi

cat << EOM

Enter the location of the pkgsrc tree from which you want to build packages.
The source directory will be mounted read/write within the chroot, but
work directories will be written there.

The install prefix will be recreated within the chroot environment.  This
will be the prefix to which packages generated by pbulk will install.  It
need not match anything outside the chroot.

The var and pkgdb directories will also be located under this prefix.

EOM

pkgsrc=`auto-ask source-prefix 'Pkgsrc source directory?' /usr/pkgsrc`
prefix=`auto-ask bin-prefix 'Pkgsrc install prefix?' /usr/pkg`
pbulk_dir=`auto-ask pbulk-dir 'Sandbox directory?' $prefix/pbulk`

rsync_user=`auto-ask rsync-user 'rsync username (leave blank if you do not want to upload packages)?' ''`
if [ 0$rsync_user != 0 ]; then
    if [ -e /etc/redhat-release ]; then
	os=RHEL$(cut -d ' ' -f 4 /etc/redhat-release | cut -d '.' -f 1)
    else
	os=$(uname)$(uname -r | cut -d '.' -f 1)
    fi
    rsync_host=`auto-ask rsync-host 'rsync hostname?' ''`
    rsync_pkg_dir=`auto-ask rsync-pkg-dir 'rsync pkg directory?' "www/pkgsrc/packages$prefix/$os"`
    rsync_report_dir=`auto-ask rsync-report-dir 'rsync report directory?' "www/pkgsrc/reports$prefix/$os"`
fi

# Set up env for this tree
source $prefix/etc/pkgsrc.sh

# Use bmake if it's in PATH
if which bmake; then
    make=bmake
else
    make=make
fi

# Create pbulk user
useradd -c 'pbulk user' -m -s /bin/sh pbulk || true

if ! which mksandbox; then
    cd $pkgsrc/pkgtools/mksandbox
    $make install
fi

# Create chroot dir from pkgsrc tree
mkdir -p $pbulk_dir
mksandbox --without-x --without-src $pbulk_dir

# Copy root ssh in case keys are installed on rsync target
mkdir $pbulk_dir/root
cp -Rp /root/.ssh $pbulk_dir/root

# Generate mk.conf fragments
# Redirect workdir or it will use the pkgsrc tree outside the chroot

cat << EOM > $pbulk_dir/mk-pbulk.conf
#!/bin/sh -e

SKIP_LICENSE_CHECK=         yes
ALLOW_VULNERABLE_PACKAGES=  yes
PKG_DEVELOPER=              yes
X11_TYPE=                   modular
FETCH_USING=                curl
MAKE_JOBS=                  4
WRKOBJDIR=                  /tmp/pkgbuild
EOM

cat << EOM > $pbulk_dir/mk-pkg.conf
#!/bin/sh -e

SKIP_LICENSE_CHECK=         yes
ALLOW_VULNERABLE_PACKAGES=  yes
PKG_DEVELOPER=              yes
X11_TYPE=                   modular
FETCH_USING=                curl
MAKE_JOBS=                  4
WRKOBJDIR=                  /tmp/pkgbuild
EOM

cat << EOM > $pbulk_dir/bootstrap
#!/bin/sh -e

# Redirect workdir or it will use the pkgsrc tree outside the chroot

# Install pbulk under a different prefix, since it wipes out the
# package building prefix before each build.

if [ ! -e /usr/pbulk/bin/bmake ]; then
    cd /sharedapps/pkgsrc-2017Q1/bootstrap
    ./bootstrap \\
	--abi=64 \\
	--make-jobs=4 \\
	--prefix=/usr/pbulk \\
	--varbase=/usr/pbulk/var \\
	--prefer-pkgsrc=yes \\
	--mk-fragment=/mk-pbulk.conf \\
	--workdir=/tmp/pbulk-bootstrap
    ./cleanup
fi

PATH=/usr/pbulk/bin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

cd /sharedapps/pkgsrc-2017Q1/pkgtools/pbulk
bmake install

# Create the package building prefix and create a bootstrap kit, just a
# tarball of prefix with nothing installed but bmake.  The bulk build will
# wipe prefix and recreate it from this tarball before each build.

if [ ! -e /sharedapps/pkg-2017Q1/bin/bmake ]; then
    cd /sharedapps/pkgsrc-2017Q1/bootstrap
    ./bootstrap \\
	--abi=64 \\
	--make-jobs=4 \\
	--prefix=$prefix \\
	--varbase=$prefix/var \\
	--prefer-pkgsrc=yes \\
	--mk-fragment=/mk-pkg.conf \\
	--workdir=/tmp/pkg-bootstrap
    ./cleanup
fi

cd /
mkdir bulklog
chown -Rh pbulk:pbulk $prefix $pkgsrc/packages /tmp/pkgbuild
tar zcvf /bootstrap.tar.gz .$prefix

# Generate a pbulk.list file.  Users can add whatever packages they want
# to this.

cat << EOM2 > /usr/pbulk/etc/pbulk.list
pkgtools/digest
EOM2

# Update pbulk.conf with some reasonable defaults for this build.

cat << EOM2 >> /usr/pbulk/etc/pbulk.conf

##################################
# Overrides from auto-pbulk-setup

bootstrapkit=/bootstrap.tar.gz
limited_list=/usr/pbulk/etc/pbulk.list
reuse_scan_results=yes
unprivileged_user=pbulk
make=$prefix/bin/bmake
bulklog=/bulklog

# Must be writable by pbulk user
packages=$pkgsrc/packages
prefix=$prefix
pkgdb=$prefix/pkgdb
varbase=$prefix/var

# Mounted from outside the chroot
pkgsrc=$pkgsrc

# Change to real IP and add IPs of other bulk build machines if desired
master_mode=no

# Change these if mail is enabled
report_subject_prefix="pkgsrc"
report_recipients="pkgsrc-bulk@netbsd.org"
mail=:

EOM2

EOM

if [ 0$rsync_user != 0 ]; then
    cat << EOM >> $pbulk_dir/bootstrap
cat << EOM2 >> /usr/pbulk/etc/pbulk.conf
pkg_rsync_target="$rsync_user@$rsync_host:$rsync_pkg_dir"
report_rsync_target="$rsync_user@$rsync_host:$rsync_report_dir"
rsync=/usr/pbulk/bin/rsync
EOM2
EOM
else
cat EOM >> $pbulk_dir/bootstrap
printf "rsync=:\n" >> /usr/pbulk/etc/pbulk.conf
EOM
fi

chmod 755 $pbulk_dir/bootstrap

# Inform the user what to do next.

cat << EOM

Now run

chroot $pbulk_dir /bin/sh
./bootstrap

Then edit /usr/pbulk/etc/pbulk.conf and /usr/pbulk/etc/pbulk.list to taste 
and finally run

/usr/pbulk/bin/bulkbuild

EOM
