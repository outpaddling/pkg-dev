#!/bin/sh -e

##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}

if [ -z $EDITOR ]; then
    EDITOR=vi
fi

if [ `uname` = 'Darwin' ]; then
    cat << EOM
Warning: Running $0 on Darwin may generate .dylib files instead of .so files.
EOM
    printf "Continue? (y/[n]) "
    read continue
    if [ 0$continue != 0y ]; then
	exit
    fi
fi

if [ -e PLIST.`uname -s` ]; then
    plist=PLIST.`uname -s`
else
    plist=PLIST
fi

printf "Remove distfile? (y/[n]) "
read remove_distfile

if [ -d CVS ]; then
    cvs up -dP
elif [ -d ../.svn ]; then
    svn up
fi

make=`pkgsrc-make`

if [ 0$remove_distfile = 0y ]; then
    $make distclean
else
    $make clean
fi

rm -f distinfo
$make distinfo

printf "Regenerate $plist? (y/[n]) "
read regen_plist

# deinstall as late as possible to minimize uninstalled time
if [ 0$regen_plist = 0'y' ]; then
    if [ -e $plist ] && [ ! -e $plist.old ]; then
	mv -f $plist $plist.old
    fi
    printf '@comment $NetBSD$\n' > PLIST
    if $make deinstall 2>&1 | fgrep -q 'still required'; then
	$make deinstall
	exit 1
    fi
    # If PKG_DEVELOPER=yes, make install will fail on incorrect PLIST
    $make stage-install || true
    $make print-PLIST > $plist
    pause
    $EDITOR $plist
    if diff -u $plist.old $plist; then
	printf "No changes to $plist\n"
    fi
    pause
    $make clean
    $make deinstall
    rm -f $plist.old
elif $make deinstall 2>&1 | fgrep -q 'still required'; then
    # Show errors redirected above
    $make deinstall
    exit 1
fi

cat << EOM

===========================================================================
Running pkg-check...
===========================================================================

EOM

# Reinstall pkg-check in case we're remaking pkg-dev
if [ $(basename $(pwd)) = pkg-dev ]; then
    $make reinstall
fi
pkg-check

printf "Commit changes to package? y/[n] "
read commit
if [ 0$commit = 0y ]; then
    if [ -d CVS ]; then
	cvs ci
    elif [ -d ../.svn ]; then
	svn ci
    elif [ -d ../.git ]; then
	git commit .
	git pull -r
	git push
    fi
fi

printf "Deinstall? y/[n] "
read deinstall
if [ 0$deinstall = 0y ]; then
    $make deinstall
fi
